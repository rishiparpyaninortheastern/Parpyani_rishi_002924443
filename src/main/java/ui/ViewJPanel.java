/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Car;
import model.Carhistory;

/**
 *
 * @author rishi
 */
public class ViewJPanel extends javax.swing.JPanel {

    //ArrayList <Car> temp = new ArrayList(); 
    
    
    /**
     * Creates new form ViewJPanel
     */
    Carhistory obj;
    public ViewJPanel(Carhistory obj) {
        initComponents();
      // Car cinpt= new Car();
         this.obj=obj;
      PopulateLocationdropdown(obj);
      PopulateBranddropdown(obj);
      PopulateYeardropdown(obj);
      PopulateSrnodropdown(obj);
      PopulateAvailabledropdown(obj);
      PopulateModeldropdown(obj);
      PopulateMaintainencedropdown(obj);
     
      //PopulateMinSeatdropdown(obj);
    }

    /**
     * This method is ca
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Yeardropdown = new javax.swing.JComboBox<>();
        Locationdropdown = new javax.swing.JComboBox<>();
        Branddropdown = new javax.swing.JComboBox<>();
        jScrlled from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Locationdropdown = new javax.swing.JComboBox<>();
        Branddropdown = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        Filtertbl = new javax.swing.JTable();
        Submit_btn = new javax.swing.JButton();
        Yeardropdown = new javax.swing.JComboBox<>();
        Availabledropdown = new javax.swing.JComboBox<>();
        Srnodropdown = new javax.swing.JComboBox<>();
        Modeldropdown = new javax.swing.JComboBox<>();
        min_txt = new javax.swing.JTextField();
        max_txt = new javax.swing.JTextField();
        Maintainencedropdown = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Book Car");

        Locationdropdown.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Locationdropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Location" }));
        Locationdropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocationdropdownActionPerformed(evt);
            }
        });

        Branddropdown.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Branddropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Brand" }));
        Branddropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BranddropdownActionPerformed(evt);
            }
        });

        Filtertbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Serialno", "brand", "model", "location", "maintainence", "year", "Seats", "Available"
            }
        ));
        jScrollPane3.setViewportView(Filtertbl);

        Submit_btn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Submit_btn.setText("Submit");
        Submit_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Submit_btnActionPerformed(evt);
            }
        });

        Yeardropdown.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Yeardropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Year" }));
        Yeardropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YeardropdownActionPerformed(evt);
            }
        });

        Availabledropdown.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Availabledropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Availablity" }));
        Availabledropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AvailabledropdownActionPerformed(evt);
            }
        });

        Srnodropdown.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Srnodropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Srno" }));
        Srnodropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SrnodropdownActionPerformed(evt);
            }
        });

        Modeldropdown.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Modeldropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Model" }));
        Modeldropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModeldropdownActionPerformed(evt);
            }
        });

        Maintainencedropdown.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Maintainencedropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Maintainence" }));
        Maintainencedropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaintainencedropdownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(337, 337, 337)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 702, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(min_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(max_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(88, 88, 88)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(Locationdropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(Branddropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(Yeardropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Srnodropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(91, 91, 91))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(Availabledropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Modeldropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(Maintainencedropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Submit_btn)
                        .addGap(152, 152, 152))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Branddropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Locationdropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Yeardropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Srnodropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Submit_btn)
                    .addComponent(Availabledropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Modeldropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Maintainencedropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(min_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(max_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void LocationdropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocationdropdownActionPerformed
       
        
        
        
        
        
        
    }//GEN-LAST:event_LocationdropdownActionPerformed

    private void BranddropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BranddropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BranddropdownActionPerformed

    private void YeardropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YeardropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_YeardropdownActionPerformed

    private void AvailabledropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AvailabledropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AvailabledropdownActionPerformed

    private void Submit_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Submit_btnActionPerformed


DefaultTableModel model=(DefaultTableModel) Filtertbl.getModel();
        model.setRowCount(0);

        for(Car cinpt: obj.getObj()){
            String Loc = cinpt.getLocation();
            String brand = cinpt.getBrand();
            String model1 = cinpt.getModel();
            String year= cinpt.getYear();
            String srno=String.valueOf(cinpt.getSno());
           String available=String.valueOf(cinpt.isAvailable());
            String seat= String.valueOf(cinpt.getSeats());
            String maintainence=String.valueOf(cinpt.isMaintainence());
//
                    
        if(checkLocation(Loc)&& checkBrand(brand)&& checkYear(year)&& checkModel(model1) && checkSrno(srno) && checkAvailable(available) && checkMinseats(seat) && checkMaxseats(seat)&& checkMaintainence(maintainence)){
//           if(checkLocation(Loc)&& checkBrand(cinpt) && checkYear(cinpt) && checkModel(cinpt)){
             Object[] row=new Object[8];
            row[0]=cinpt;
            row[1]=cinpt.getBrand();
            row[2]=cinpt.getModel();
            row[3]=cinpt.getLocation();
            row[4]=cinpt.isMaintainence();
            row[5]=cinpt.getYear();
            row[6]=cinpt.getSeats();
            row[7]=cinpt.isAvailable();
            model.addRow(row);
            }
        
        
        }
              
    }//GEN-LAST:event_Submit_btnActionPerformed
    
    private void SrnodropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SrnodropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SrnodropdownActionPerformed

    private void ModeldropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModeldropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ModeldropdownActionPerformed

    private void MaintainencedropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaintainencedropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MaintainencedropdownActionPerformed
public void PopulateLocationdropdown(Carhistory temp){
  //  =new Carhistory();
LinkedHashSet<String> dropdown = new LinkedHashSet<String>();

for(int r=0;r<temp.getObj().size();r++){
    dropdown.add(temp.getObj().get(r).getLocation());
}

Iterator itr = dropdown.iterator();

    while(itr.hasNext()){ 
        
         Locationdropdown.addItem(itr.next().toString());
        
    
        }

        }


public void PopulateBranddropdown(Carhistory temp){
  //  =new Carhistory();
LinkedHashSet<String> dropdown = new LinkedHashSet<String>();

for(int r=0;r<temp.getObj().size();r++){
    dropdown.add(temp.getObj().get(r).getBrand().trim());
}

Iterator itr = dropdown.iterator();

    while(itr.hasNext()){ 
        
         Branddropdown.addItem(itr.next().toString());
        
    
        }

        }
    
public void PopulateYeardropdown(Carhistory temp){
  //  =new Carhistory();
LinkedHashSet<String> dropdown = new LinkedHashSet<String>();

for(int r=0;r<temp.getObj().size();r++){
    dropdown.add(temp.getObj().get(r).getYear());
}

Iterator itr = dropdown.iterator();

    while(itr.hasNext()){ 
        
         Yeardropdown.addItem(itr.next().toString());
        
    
        }

        }     
public void PopulateSrnodropdown(Carhistory temp){
  //  =new Carhistory();
LinkedHashSet<String> dropdown = new LinkedHashSet<String>();

for(int r=0;r<temp.getObj().size();r++){
    int i = temp.getObj().get(r).getSno();
    
    dropdown.add(String.valueOf(i));
}

Iterator itr = dropdown.iterator();

    while(itr.hasNext()){ 
        
         Srnodropdown.addItem(itr.next().toString());
        
    
        }

        } 

public void PopulateAvailabledropdown(Carhistory temp){
  //  =new Carhistory();
LinkedHashSet<String> dropdown = new LinkedHashSet<String>();

for(int r=0;r<temp.getObj().size();r++){
    boolean i = temp.getObj().get(r).isAvailable();
    
    dropdown.add(String.valueOf(i));
}

Iterator itr = dropdown.iterator();

    while(itr.hasNext()){ 
        
         Availabledropdown.addItem(itr.next().toString());
        
    
        }

        } 


public void PopulateModeldropdown(Carhistory temp){
  //  =new Carhistory();
LinkedHashSet<String> dropdown = new LinkedHashSet<String>();

for(int r=0;r<temp.getObj().size();r++){
    String i = temp.getObj().get(r).getModel();
    
    dropdown.add(i);
}

Iterator itr = dropdown.iterator();

    while(itr.hasNext()){ 
        
         Modeldropdown.addItem(itr.next().toString());
        
    
        }

        } 
public void PopulateMaintainencedropdown(Carhistory temp){
  //  =new Carhistory();
LinkedHashSet<String> dropdown = new LinkedHashSet<String>();

for(int r=0;r<temp.getObj().size();r++){
    boolean i = temp.getObj().get(r).isMaintainence();
    
    dropdown.add(String.valueOf(i));
}

Iterator itr = dropdown.iterator();

    while(itr.hasNext()){ 
        
         Maintainencedropdown.addItem(itr.next().toString());
        
    
        }

        } 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Availabledropdown;
    private javax.swing.JComboBox<String> Branddropdown;
    private javax.swing.JTable Filtertbl;
    private javax.swing.JComboBox<String> Locationdropdown;
    private javax.swing.JComboBox<String> Maintainencedropdown;
    private javax.swing.JComboBox<String> Modeldropdown;
    private javax.swing.JComboBox<String> Srnodropdown;
    private javax.swing.JButton Submit_btn;
    private javax.swing.JComboBox<String> Yeardropdown;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField max_txt;
    private javax.swing.JTextField min_txt;
    // End of variables declaration//GEN-END:variables

    
    boolean  checkLocation(String Loc){
        System.out.println("********************* " + Locationdropdown.getSelectedIndex());
        if(Locationdropdown.getSelectedIndex()== 0 ){
           return true;
                
        }
        else if(Locationdropdown.getSelectedItem().equals(Loc)){
            return true;
       }
        else{
            return false;
        }
    }
     boolean  checkModel(String model){
       
         if(Modeldropdown.getSelectedIndex()== 0 ){
           return true;
         
        }
        else if(Modeldropdown.getSelectedItem().equals(model)){
            return true;
       }
        else{
            return false;
        }
    }
    boolean  checkMinseats(String Seats){
        
        if(min_txt.getText().isEmpty()){
            return true;
        }
       
       else  if(Integer.parseInt(min_txt.getText()) <= Integer.parseInt(Seats)){
           return true;
           
   
        }
        
        else{
             //JOptionPane.showMessageDialog(this,"Not Available");
            return false;
        }
    }
     boolean  checkMaxseats(String Seats){
         
         if(max_txt.getText().isEmpty()){
             return true;
         }
         else if(Integer.parseInt(max_txt.getText())>= Integer.parseInt(Seats)){
           return true;
           
   
        }
        
        else{
             //JOptionPane.showMessageDialog(this,"Not Available");
            return false;
        }
         
             
             }
    boolean  checkBrand(String brand){
          System.out.print(Branddropdown.getSelectedIndex());
        if (Branddropdown.getSelectedIndex()== 0 ){
          
           return true;
        }
                
        else if (Branddropdown.getSelectedItem().equals(brand)){
            return true;
        }
        else{
            return false;
        }
    }  
      
    boolean checkYear(String year){
        if(Yeardropdown.getSelectedIndex()== 0 ){
           return true;
        }
                
        else if (Yeardropdown.getSelectedItem().equals(year)){
            return true;
        }
       else{
            return false;
        }
    }
    boolean checkSrno(String srno){
        if(Srnodropdown.getSelectedIndex()== 0 ){
           return true;
        }
                
        else if (Srnodropdown.getSelectedItem().equals(srno)){
            return true;
        }
       else{
            return false;
        }
    }
    
    boolean checkAvailable(String available){
        if(Availabledropdown.getSelectedIndex()== 0 ){
           return true;
        }
                
        else if(Availabledropdown.getSelectedItem().equals(available)){
            return true;
        }
       else{
            return false;
        }
    }
     boolean checkMaintainence(String maintainence){
        if(Maintainencedropdown.getSelectedIndex()== 0 ){
           return true;
        }
                
        else if(Maintainencedropdown.getSelectedItem().equals(maintainence)){
            return true;
        }
       else{
            return false;
        }
    }
    private void Locationtable(String selectedvalue) {
        DefaultTableModel model=(DefaultTableModel) Filtertbl.getModel();
        model.setRowCount(0);
       
        for(Car cinpt: obj.getObj()){
            
            if(selectedvalue.equalsIgnoreCase(cinpt.getLocation())){
             Object[] row=new Object[8];
            row[0]=cinpt;
            row[1]=cinpt.getBrand();
            row[2]=cinpt.getModel();
            row[3]=cinpt.getLocation();
            row[4]=cinpt.isMaintainence();
            row[5]=cinpt.getYear();
            row[6]=cinpt.getSeats();
            row[7]=cinpt.isAvailable();
            model.addRow(row);
            }
           
        
        }
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    //brand,model,city,year,sno
  
    
   
    
    
}
