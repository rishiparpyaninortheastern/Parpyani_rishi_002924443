/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import model.Encounter;
import model.EncounterHistory;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;
import model.VitalSignDirectory;
import model.VitalSigns;

/**
 *
 * @author rishi
 */

public class DisplayVitals extends javax.swing.JPanel {
VitalSigns v;
PersonDirectory pd;
VitalSignDirectory vdobj;
EncounterHistory ehobj;
Encounter encounterobj;
Patient p;
PatientDirectory patientd;
    /**
     * Creates new form DisplayVitals
     */
    public DisplayVitals(PersonDirectory pd,VitalSignDirectory vdobj,EncounterHistory ehobj,VitalSigns v,Encounter e,Patient p,PatientDirectory patientd) {
        initComponents();
        this.pd=pd;
        this.v=v;
        this.vdobj=vdobj;
        this.encounterobj=e;
       // this.
       this.ehobj=ehobj;
       this.p=p;
       this.patientd=patientd;
        //this.eobj=eobj;
        DisplayVitals(v,pd,encounterobj);
         //DisplayAbnormalVitals(v,patientd,encounterobj);
          DisplayAbnormalVitals();
    }

    
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Vitaltbl = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Abnormalvitaltbl = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();

        Vitaltbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Heart Rate", "Blood Pressure", "Fasting Sugar level", "Post Meal Sugar Level", "Oxygen Rate", "Temperature", "Time"
            }
        ));
        jScrollPane1.setViewportView(Vitaltbl);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("VITALS");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Patient Vital Data");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Person Vital Data");

        Abnormalvitaltbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Heart Rate", "Blood Pressure", "Fasting Sugar level", "Post Meal Sugar Level", "Oxygen Rate", "Temperature"
            }
        ));
        jScrollPane2.setViewportView(Abnormalvitaltbl);

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(340, 340, 340)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(245, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
public void  DisplayVitals(VitalSigns v,PersonDirectory pd,Encounter e){
        DefaultTableModel model=(DefaultTableModel) Vitaltbl.getModel();
         model.setRowCount(0);
         HashMap <Integer,ArrayList<VitalSigns>> vcurr= new HashMap <Integer,ArrayList<VitalSigns>>();
        // ArrayList<VitalSigns> vcurr= new ArrayList<VitalSigns>();
         HashMap <Integer,ArrayList <Encounter>> ecurr= new HashMap <Integer,ArrayList<Encounter>>();
         for(Person pi : pd.getObj() ){
             vcurr=vdobj.getObj();
            ecurr= ehobj.getObj();
               Object [] row= new Object[8];  
           for(VitalSigns vobj : vcurr.get(pi.getId())){
                for( Encounter eobj: ecurr.get(pi.getId())){
                   
                    row[0]=pi.getId();
                    row[1]=pi.getName();
                    row[2]=vobj.getHeartrate();
                    row[3]=vobj.getBloodpressure();
                    row[4]=vobj.getFastingsugar();
                    row[5]=vobj.getPostmealsugar();
                    row[6]=vobj.getTemperature();
                 //eobj.getEncounterDatetime();
                    row[7]=e.getEncounterDatetime();
                    
                    
             }
                 model.addRow(row); 
             }
            
            
             
         
             
           

         }
          
    }
public void  DisplayAbnormalVitals(){
        DefaultTableModel model=(DefaultTableModel) Abnormalvitaltbl.getModel();
         model.setRowCount(0);
         HashMap <Integer,ArrayList<VitalSigns>> Abnormal = abnormalrecord();
         
        Iterator it = Abnormal.entrySet().iterator();
        while (it.hasNext()) {
        Map.Entry pair = (Map.Entry)it.next();
        ArrayList<VitalSigns> Abv = new ArrayList<VitalSigns>();
        Abv = (ArrayList<VitalSigns>) pair.getValue();
        for(VitalSigns v: Abv){
                    Object [] row= new Object[8];  
                    row[0]=pair.getKey().toString();
                    row[2]=v.getHeartrate();
                    row[3]=v.getBloodpressure();
                    row[4]=v.getFastingsugar();
                    row[5]=v.getPostmealsugar();
                    row[6]=v.getTemperature();
                 //eobj.getEncounterDatetime();
                   // row[7]=e.getEncounterDatetime();
                   model.addRow(row); 
        }
        it.remove(); // avoids a ConcurrentModificationException
    }
}
  
             
 public HashMap <Integer,ArrayList<VitalSigns>> abnormalrecord(){
      
      //PatientDirectory  patient=new PatientDirectory();
         HashMap <Integer,ArrayList<VitalSigns>> abnormal= new HashMap <Integer,ArrayList<VitalSigns>>();
         ArrayList <VitalSigns> vs= new ArrayList<VitalSigns>();
       for(Person p : pd.getObj()){
           for(VitalSigns v : vdobj.getObj().get(p.getId())){
                 if(v.getBloodpressure()>120 || v.getFastingsugar()>80 || v.getHeartrate()>120|| v.getPostmealsugar()>160 || v.getTemperature()>100){
                     
                     vs.add(v);
                 }
                 
                 
       }
           abnormal.put(p.getId(),vs);
      
  }
      return abnormal;
  }
          
     
           

         
          
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Abnormalvitaltbl;
    private javax.swing.JTable Vitaltbl;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
